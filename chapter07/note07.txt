                                    第7章 基本类型

一、整数类型
    无符号整数主要用于系统编程和底层与机器相关的应用，在此之前通常不使用。

    C89中：
    ·只有6种， (unsigned) short(int) 、int、unsigned int、(unsigned) long (int)。
    ·取值范围因机器（编译器）不同而不同，确定范围的一种方法是检查<limits.h>头中对每种整数类型的最值所定义的宏

    C99中：
    ·额外提供了两个标准整数类型：long long (int)、unsigned long long (int)，满足超大型整数和适应支持64位运算的处理器
    ·允许定义扩展的整数类型（128位）

    整数常量
        C语言运行用十进制、八进制（必须以0来开头）和十六进制（必须以0x开头）的形式书写整数常量，
        注意只是书写形式，数的存储形式是二进制。
        其中八进制和十六进制只能书写非负整数，因此八进制和十六进制更适用于底层程序的编写：
        C语言中的%o和%0x格式化输出符号都是用于输出无符号整数的，因此无法直接输出负值。

        C89中：
        编译器确定常量类型的规则：
        ·十进制：int ——> long int ——> unsigned long int ——>终
        ·八、十六进制：int ——> unsigned int ——> long int ——> unsigned long int ——> 直到找到。

        强制编译器确定常量类型：
        ·常量后加L或l ——> 长整数
        ·常量后加U或u ——> 无符号常量
        ·常量后加UL或ul ——> 无符号长整型
        ps:顺序和大小没有影响

        C99中：
        编译器确定常量类型的规则：
        ·十进制：int、long int、long long int中能表示该值的“最小”类型
        ·八、十六进制：int——>unsigned int——>long int——>unsigned long int
                    ——>long long int——>unsigned long long int
        ·如果常量的数值不能用标准的整数类型表示，则可以用扩展的整数类型

        强制编译器确定常量类型：
        以LL或ll(大小写要一致)结尾的常量为long long int型，
        在LL或ll前面或后面加U或u，为unsigned long long int型。

    整数溢出
        同类型整数间的算术运算结果的类型仍是原整数类型，但结果可能超出原类型的取值范围（即所需数位超出），就会造成溢出
        ·有符号整数溢出，程序的行为是未定义的，结果不确定；
        ·无符号整数溢出，结果是有定义的：对2^n取模，其中n是用于存储结果的位数。

    读/写整数
        ·无符号整数：转换说明使用u、o或x代替d
        ·短整数：d、u、o或x前加字母h
        ·长整数：d、u、o或x前加字母l
        ·长长整数：d、u、o或x前加字母ll

二、浮点类型
    C语言提供三种浮点类型：
    ·float：单精度浮点数
    ·double：双精度浮点数
    ·long double：扩展精度浮点数

    不同计算机对浮点数的存储方法也不同，故C标准没有说明float、double和long double类型提供的准确精度。
    大多数计算机遵循电气电子工程师学会IEEE 754 标准（即国际电工委员会IEC 60559）的规范：
    ·格式：单精度（32位）、双精度（64位）、单扩展精度、双扩展精度；
    ·存储形式：科学计数法；
        符号、指数和小数：
            指数位数说明大小程度
            小数位数说明精度
    可以在头<float.h>中找到定义浮点类型特征的宏

    C99新增了复数类型，float_Complex、double_Complex、long double_Complex

    浮点常量
        默认情况下，C编译器把浮点常量以双精度数的形式存储。
        强制转换编译器存储形式：
            在浮点常量末尾加F或f，以float型格式存储，加L或l，以long double型格式存储

    读/写浮点数
        ·读double：在e、f或g前放置l
        ·读写long double：在e、f或g前放置L

三、字符类型
    不同的机器有不同的字符集，char型的值也不同。
    最常用的字符集是美国信息交换标准代码ASCII字符集：
        用7位表示128个常用字符。

    字符操作
        C语言把字符当作小整数处理，字符常量是int型，不是char型
        在以数的方式处理字符时，
        这些数字依据使用的字符集可能有所不同，
        所以可能会导致编译器无法检测出错误，妨碍程序的可移植性。

        C标准没有说明char是有符号还是无符合，由编译器决定，
        但允许用signed和unsigned修饰

        C89的整值类型：整数类型、字符类型、枚举类型
        C99不使用整值类型，而是扩展了整数类型，包含字符类型和枚举类型，_Bool型是无符号整型。

    算术类型
        整数类型和浮点类型的总称

        C89中的算术类型：
        ·整值类型：字符、有/无符号整型、枚举
        ·浮点类型

        C99中的算术类型：
        ·整数类型：字符、有/无符号整型（扩展）、枚举
        ·浮点类型：实数、复数

    转义序列
        因为有一些无法从键盘输入或无法用单引号括起来的不可见的特殊符号
        C语言提供了一种特殊的表示方法————转义序列
        分字符转义序列和数字转义序列两种

        字符转义序列，只包含最常用的字符：
            \a、\b、\f（换页符）、\n、\r（回车符）、\t、\v、\\、\?、\'、\"。
        数字转义序列，包含所有无法打印的ASCII字符：
            八进制转义序列：由\和一个最多三位八进制数字（为无符号字符，最大值位八进制的377）组成
            十六进制转义序列：由\x（必须小写）和跟随其后的一个十六进制（为无符号字符，最大值位八进制的FF）组成。

        转义序列一般采用#define的方式命名，便于理解

        字符的表示法还有三字序列和C99增加的通用字符名

    字符处理函数
        c语言的库函数，#include<ctype.h>

    getchar/putchar函数
        ·getchar读取时不会跳过空白字符
        ·getchar返回的是读入的字符（int型）
        ·节约程序执行时间，（是作为宏来实现的）
        ·getchar对于搜索字符和跳过字符的循环十分有用
        ·如果getchar和scanf混用，scanf函数倾向于遗留下它“扫视”过但未读取的字符（包括换行符）
        ps:作为C语言的UNIX继承部分，行的结束位置标记一直被作为单独的回行符（不是回车）看待。

四、类型转换
    计算机执行算术运算时，要求操作数的大小（即位的数量相同）和存储方式相同，
    而C语言运行表达式中使用混合的基本类型，
    这种情况C编译器需要生成一些指令转换操作数的类型，这被称为隐式转换，
    C语言还允许使用强制运算符进行显示转换。

    隐式转换：
    ·算术或逻辑表达式中操作数类型不匹配
    ·赋值运算符右侧表达式与左侧变量类型不匹配
    ·函数调用中实参与对于形成类型不匹配
    ·return语句中表达式函数返回值类型不匹配

    C89中，常用算术转换
        把操作数转换成可以安全地适用于其的“最狭小”（存储字节）数据类型(即提升)，最常用的整值提升：char/short——>int

        两种算术转换规则：
            任一操作数类型为浮点型，float——>double——>long double
            任一操作数都不是浮点型，int——>unsigned int——>long int——>unsigned long int
            ps:当有符号和无符号操作数混合时，把有符号转换成无符号的值。
                转换过程需要加上或减去n+1的倍数，其中n是无符号能表示的最大值。（可能导致编程错误）

    赋值过程中的转换
        常用算术转换不适用于赋值运算。
        C语言另一条转换规则：把赋值运算右边表达式的值的类型转换成左边变量的类型。
        ·变量类型至少和表达式类型一样”宽“时无影响
        ·浮点数赋值给整型变量时会丢失精度（小数部分）
        ·表达式的值在变量类型范围之外时会得到无意义的结果

    C99中的隐式转换
        规则：
            允许每个整数类型具有“整数转换等级“（忽略扩展的整数类型和枚举类型）：
                (unsigned)long long int
            ——> (unsigned)long int
            ——> (unsigned)int
            ——> (unsigned)short int
            ——> (unsigned)char
            ——> _Bool
            用整数提升代替C89的整值提升，可以将任何等级低于int和unsigned int的类型转换为int或unsigned int。

        C99中，常用算术转换规则：
            ·任一操作数类型为浮点型：
                float——>double——>long double（除复数型）
            ·任一个操作数都不是浮点型，先进行全部操作数的整数提升
                ·类型相同则结束eg:char、short——>int
                ·不同时：
                    ·都是有符号或无符号时
                        转换等级较低的类型转换成等级较高的
                        eg:int、long——>long
                    ·无符号操作数高于或等于有符号操作数时，
                        将有符号操作数的类型转换成无符号操作数的类型
                        eg:unsigned int、int——>unsigned int
                    ·有符号操作数类型可以表示无符号操作数类型的所有值时，
                        将无符号操作数的类型转换成有符号操作数的类型
                        eg:long、unsigned int——>long

    强制类型转换
        强制类型转换运算符()为一元运算符，优先级高于二元运算符。
        强制类型转换可以：
            ·控制类型转换
            ·强制转换后迫使编译器转换二元运算符的第二个操作数的类型
            ·防止溢出

五、类型定义
    C语言程序的习惯：将类型定义的名字首字母大写。
    优点：
        ·使用有意义的类型名是程序更易于理解
        ·使程序更容易修改

    类型定义和移植性
        类型定义是可移植性程序的重要工具，因为不同计算机上的类型的取值范围可能不同。
        以_t结尾的类型名就是C语言库自身使用typedef为可能已经C语言实现的不同而不同的类型创建的。
        C99中，<stdint.h>使用typedef定义占用特定位数的整数类型名。如int32_t。
    与宏定义的重要不同点：
        ·类型定义比宏定义功能更强大，如数组和指针类型是不能定义为宏的
        ·类型定义的对象具有该对象相同的作用域规则，而宏定义的对象在预处理时会在任何出现的地方被替换掉。

六、sizeof运算符
    应用于类型时：
        该运算符允许程序存储指定类型值所需空间的大小。
        运算符结果是一个无符号整数（size_t）值，代表存储属于类型名的值所需的字节数。
        sizeof(char)始终为1，其他类型因机器不同而不同
        编译器通常能确定sizeof表达式的值，但在C99中不能确定变长数组的大小。

    应用于常量、变量或表达式时：
        sizeof是一元运算符，优先级高于二元运算符，()不是必须的，但建议保留。

    size_t类型是一种由实现定义的类型
        C89中，显示其计算结果前最好是强制转换成unsigned long类型
        C99中，在转换说明中的一般整数（u）代码前加字母z，组成%zu

Ps:
    所谓的经典C通常指的是经典的C语言编程书籍《The C Programming Language》（中文译名《C程序设计语言》），
    该书由C语言的创始人之一Dennis Ritchie和Brian Kernighan合著，于1978年出版。
    这本书被广泛认为是C语言编程的经典之作，对C语言的发展和普及做出了重要贡献。
    因此，经典C通常指的是这本书，而不是一种标准。
    不过，该书中介绍的C语言语法和标准已经成为C语言的基础，
    并且在很大程度上影响了后来的C语言标准。

    三字符序列
        一些国家键盘上打不出#、[、]、\、^、{、}、|这些符合，可使用三字序列表示。
        字符串         转义后
        ??=             #
        ??(             [
        ??)             ]
        ??/             \
        ??<             {
        ??>             }
        ??'             ^
        ??!             |
        ??-             ～
        三字序列以??开头，所以如果需要在字符串中加入??需要用\?代替第二个?。
